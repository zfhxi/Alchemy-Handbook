(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{306:function(a,s,t){"use strict";t.r(s);var n=t(10),e=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"anaconda-miniconda3安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#anaconda-miniconda3安装"}},[a._v("#")]),a._v(" Anaconda/Miniconda3安装")]),a._v(" "),s("p",[a._v("由于Miniconda3相比轻量一些，而且两者操作基本无区别（区别见"),s("a",{attrs:{href:"https://blog.csdn.net/qq_18668137/article/details/80807829",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://blog.csdn.net/qq_18668137/article/details/80807829"),s("OutboundLink")],1),a._v("），因此推荐使用miniconda3")]),a._v(" "),s("h2",{attrs:{id:"下载miniconda3包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下载miniconda3包"}},[a._v("#")]),a._v(" 下载Miniconda3包")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://mirrors.tuna.tsinghua.edu.cn/#",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://mirrors.tuna.tsinghua.edu.cn/#"),s("OutboundLink")],1),a._v(" →”获取下载链接“→应用软件→Conda→Miniconda3-pyxx x.xx.x (Linux/x86_64, sh)")]),a._v(" "),s("h2",{attrs:{id:"安装miniconda3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装miniconda3"}},[a._v("#")]),a._v(" 安装miniconda3")]),a._v(" "),s("p",[a._v("先赋予执行权限，再执行，也可直接使用"),s("code",[a._v("“.”")]),a._v("来执行：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x Miniconda3-pyxx.sh\n./Miniconda3-pyxx.sh\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# or")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" Miniconda3-pyxx.sh\n")])])]),s("p",[s("code",[a._v('"."')]),a._v("和"),s("code",[a._v('"./"')]),a._v("的区别见"),s("a",{attrs:{href:"https://blog.csdn.net/u014471752/article/details/84565908",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://blog.csdn.net/u014471752/article/details/84565908"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("按照提示输入就行。注意miniconda3的安装路径，输入时可选择为"),s("code",[a._v("/home/你的用户名/.miniconda3")]),a._v("，允许执行"),s("code",[a._v("conda init")]),a._v("方便添加shell自动初始化conda环境。")]),a._v(" "),s("p",[a._v("然后防止默认激活base环境（登录打开shell不激活环境）："),s("code",[a._v("conda config --set auto_activate_base false")])]),a._v(" "),s("h2",{attrs:{id:"修改源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改源"}},[a._v("#")]),a._v(" 修改源")]),a._v(" "),s("p",[a._v("如何修改，可参考"),s("a",{attrs:{href:"https://mirrors.help/anaconda/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://mirrors.help/anaconda/"),s("OutboundLink")],1),a._v("。下面给出一个示例：")]),a._v(" "),s("p",[a._v("全部复制以下命令直接粘贴到终端执行：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'auto_activate_base: false\nchannels:\n  - defaults\nshow_channel_urls: true\ndefault_channels:\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\ncustom_channels:\n  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  nvidia: https://mirrors.sustech.edu.cn/anaconda-extra/cloud/'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" ~/.condarc\n")])])]),s("p",[a._v("执行"),s("code",[a._v("conda clean -i")]),a._v("，清除缓存")]),a._v(" "),s("h2",{attrs:{id:"创建虚拟环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建虚拟环境"}},[a._v("#")]),a._v(" 创建虚拟环境")]),a._v(" "),s("p",[a._v("执行如下命令：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("conda create "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-n")]),a._v(" 环境名 "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("python")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("python版本\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 激活环境")]),a._v("\nconda activate 环境名\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 更改pip源为清华源")]),a._v("\npip config "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装其他包")]),a._v("\n")])])]),s("h2",{attrs:{id:"粗暴克隆环境-慎选"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#粗暴克隆环境-慎选"}},[a._v("#")]),a._v(" 粗暴克隆环境（慎选）")]),a._v(" "),s("p",[a._v("注：有些环境里的包是通过编译来安装的，如horovod，克隆后，在新的服务器上可能不会正常工作……")]),a._v(" "),s("p",[a._v("在某些情况下，在多台服务器间或多用户间克隆环境是常见需求。有这个暴力操作的原因是，conda自带的克隆选项(conda create —name  xxx —clone 环境名或路径名)不怎么好用（反正我没操作成功过）。当然似乎有其他更专业的方法，参考"),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/87344422",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://zhuanlan.zhihu.com/p/87344422"),s("OutboundLink")],1),a._v("，但经我测试，都没通过（可能操作原因）。")]),a._v(" "),s("p",[a._v("我曾经使用这种暴力方式给我的同门拷贝环境，在为第二个同门拷贝时，改进了一些缺陷（写了批量修改解释器注释的shell脚本），不知道它们是否发现了其他bug 🤣。")]),a._v(" "),s("p",[a._v("1）将别人的环境使用如下方式打包、传输、解压：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# cd到要打包的环境")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" xxx/envs\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 打包环境名xxx")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" cjvf xxx.tar.bz2 xxx\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 可选用sftp方式来传输环境")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 然后拷贝环境到目标miniconda3环境的envs目录下，解压")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" xjvf xxx.tar.bz2\n")])])]),s("p",[a._v('2）按照如下方式批量修改环境bin目录中的Python script文件中的第一行，若不修改其声明的解释器会报错"'),s("code",[a._v("Bad Interpreter: No such file or directory")]),a._v('"：')]),a._v(" "),s("p",[a._v("新建change_interpreter.sh，粘贴以下内容：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("BIN_PATH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v("/bin\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("PYTHON_INTERPRETER")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"#!'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("realpath $BIN_PATH/python"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[a._v("file")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$BIN_PATH")]),a._v("/*\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-b")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$file")]),a._v('"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" *"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Python script"')]),a._v("* "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sed")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1s|.*|'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$PYTHON_INTERPRETER")]),a._v('|g"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$file")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("done")]),a._v("\n")])])]),s("p",[a._v("然后")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" /xxx/miniconda3/envs\n./change_interpreter.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("环境目录名"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),s("p",[a._v("3）这种拷贝环境的操作，可能导致gpustat报错”_curses.error: setupterm: could not find terminfo database“（暂未查明原因），因此添加terminfo路径到环境变量：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'export TERMINFO=/etc/terminfo'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" ~/.bashrc\n")])])]),s("p",[a._v("参考"),s("a",{attrs:{href:"https://stackoverflow.com/questions/9485699/setupterm-could-not-find-terminal-in-python-program-using-curses",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://stackoverflow.com/questions/9485699/setupterm-could-not-find-terminal-in-python-program-using-curses"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("4）激活环境")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 先查看已有的环境")]),a._v("\nconda "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v(" list\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 发现转移过来的环境xxx在列表中，激活它")]),a._v("\nconda activate xxx\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 为了使每次登录shell都能默认激活环境，因此把激活命令写入.bashrc（注意是两个右箭头）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'conda activate xxx'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" ~/.bashrc\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);